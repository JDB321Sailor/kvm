version: '3.8'

services:
  traefik:
    image: traefik:3.4.4
    container_name: jetkvm-traefik
    environment:
      - CF_      # Main production route
      - "traefik.http.routers.frontend-main.rule=Host(`jetkvm.jbame.net`)"
      - "traefik.http.routers.frontend-main.entrypoints=websecure"
      - "traefik.http.routers.frontend-main.tls.certresolver=cloudflare"
      - "traefik.http.routers.frontend-main.service=frontend"
      - "traefik.http.routers.frontend-main.priority=100"
      # Production UI route
      - "traefik.http.routers.frontend-ui.rule=Host(`jetui.jbame.net`)"
      - "traefik.http.routers.frontend-ui.entrypoints=websecure"
      - "traefik.http.routers.frontend-ui.tls.certresolver=cloudflare"
      - "traefik.http.routers.frontend-ui.service=frontend"
      - "traefik.http.routers.frontend-ui.priority=100"ifGokxt3KWS4G1SSqfTO8kvq981b7lq1CWOG_c-U
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config.yaml:/etc/traefik/traefik.yaml:ro
      - ./traefik/dynamic.yaml:/etc/traefik/dynamic.yaml:ro
      - traefik_data:/data
    networks:
      - jetkvm
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: jetkvm-postgres
    environment:
      POSTGRES_USER: jetkvm
      POSTGRES_PASSWORD: dxSAJDo9HOUAhQbTi1fTO4kbkxXvpy1ZWCw0JDgjg6E=
      POSTGRES_DB: jetkvm
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jetkvm
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jetkvm -d jetkvm"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-migrate:
    image: jetkvm-cloud-api:latest
    container_name: jetkvm-api-migrate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://jetkvm:dxSAJDo9HOUAhQbTi1fTO4kbkxXvpy1ZWCw0JDgjg6E=@postgres:5432/jetkvm?schema=public"
    env_file:
      - ./cloud-api/.env
    networks:
      - jetkvm
    command: ["npx", "prisma", "migrate", "deploy"]
    restart: "no"

  api:
    image: jetkvm-cloud-api:latest
    container_name: jetkvm-api
    depends_on:
      postgres:
        condition: service_healthy
      api-migrate:
        condition: service_completed_successfully
      traefik:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://jetkvm:dxSAJDo9HOUAhQbTi1fTO4kbkxXvpy1ZWCw0JDgjg6E=@postgres:5432/jetkvm?schema=public"
      API_HOSTNAME: "https://jetapi.jbame.net"
      APP_HOSTNAME: "https://jetui.jbame.net"
      COOKIE_SECRET: "ZYrd5wHwi1+m1mySI5bgfh7IoXWLkegU4JaXFTACKm8="
      CORS_ORIGINS: "https://jetui.jbame.net,https://jetkvm.jbame.net,http://localhost:8080,http://localhost:3000,http://localhost:5173"
      NODE_ENV: production
    env_file:
      - ./cloud-api/.env
    networks:
      - jetkvm
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      # Production API route
      - "traefik.http.routers.api-prod.rule=Host(`jetapi.jbame.net`)"
      - "traefik.http.routers.api-prod.entrypoints=websecure"
      - "traefik.http.routers.api-prod.tls.certresolver=cloudflare"
      - "traefik.http.routers.api-prod.service=api"
      - "traefik.http.routers.api-prod.priority=100"
      # Local development route (for localhost access via HTTPS)
      - "traefik.http.routers.api-local.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-local.entrypoints=websecure"
      - "traefik.http.routers.api-local.tls=true"
      - "traefik.http.routers.api-local.service=api"
      - "traefik.http.routers.api-local.priority=200"
      # Strip /api prefix for local access
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.api-local.middlewares=api-stripprefix"
      # Service definition
      - "traefik.http.services.api.loadbalancer.server.port=3000"

  frontend:
    image: jetkvm-ui:latest
    container_name: jetkvm-frontend
    depends_on:
      api:
        condition: service_healthy
      traefik:
        condition: service_healthy
    environment:
      - VITE_CLOUD_API=https://jetapi.jbame.net
    networks:
      - jetkvm
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      # Main production route
      - "traefik.http.routers.frontend-main.rule=Host(`jetkvm.jbame.net`)"
      - "traefik.http.routers.frontend-main.entrypoints=websecure"
      - "traefik.http.routers.frontend-main.tls.certresolver=cloudflare"
      - "traefik.http.routers.frontend-main.service=frontend"
      - "traefik.http.routers.frontend-main.middlewares=secure-headers"
      - "traefik.http.routers.frontend-main.priority=100"
      # Production UI route
      - "traefik.http.routers.frontend-ui.rule=Host(`jetui.jbame.net`)"
      - "traefik.http.routers.frontend-ui.entrypoints=websecure"
      - "traefik.http.routers.frontend-ui.tls.certresolver=cloudflare"
      - "traefik.http.routers.frontend-ui.service=frontend"
      - "traefik.http.routers.frontend-ui.middlewares=secure-headers"
      - "traefik.http.routers.frontend-ui.priority=100"
      # Local development route
      - "traefik.http.routers.frontend-local.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend-local.entrypoints=websecure"
      - "traefik.http.routers.frontend-local.tls=true"
      - "traefik.http.routers.frontend-local.service=frontend"
      - "traefik.http.routers.frontend-local.priority=100"
      # Service definition
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

volumes:
  postgres_data:
  traefik_data:

networks:
  jetkvm:
    driver: bridge